require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/tasks", type: :request do
  let(:user) { User.create!(username: "username", password: "Aa11223344") } # todo: replace with factory_bot
  let(:valid_attributes) {
    {
      description: "new task",
      state: "opened",
      user_id: user.id
    }
  }

  let(:invalid_attributes) {
    {state: "wrong state"}
  }

  before do
    sign_in(user)
  end

  describe "GET /index" do
    it "renders a successful response" do
      Task.create! valid_attributes
      get tasks_url
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Task" do
        expect {
          post tasks_url, params: {task: valid_attributes}
        }.to change(Task, :count).by(1)
      end

      it "redirects to the task index" do
        post tasks_url, params: {task: valid_attributes}
        expect(response).to redirect_to(tasks_url)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Task" do
        expect {
          post tasks_url, params: {task: invalid_attributes}
        }.to change(Task, :count).by(0)
      end

      it "responds 422" do
        post tasks_url, params: {task: invalid_attributes}
        expect(response).to redirect_to(tasks_url)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {state: "in_progress"}
      }

      it "updates the requested task" do
        task = Task.create! valid_attributes
        patch task_url(task), params: {task: new_attributes}
        task.reload
        expect(task.in_progress?).to be_truthy
      end

      it "redirects to task index" do
        task = Task.create! valid_attributes
        patch task_url(task), params: {task: new_attributes}
        expect(response).to redirect_to(tasks_url)
      end
    end

    context "with invalid parameters" do
      it "redirects to task index" do
        task = Task.create! valid_attributes
        patch task_url(task), params: {task: invalid_attributes}
        expect(response).to redirect_to(tasks_url)
      end
    end
  end

  describe "DELETE /destroy" do
    it "change state to removed" do
      task = Task.create! valid_attributes
      delete task_url(task)
      task.reload
      expect(task.removed?).to be_truthy
    end

    it "redirects to the tasks list" do
      task = Task.create! valid_attributes
      delete task_url(task)
      expect(response).to redirect_to(tasks_url)
    end
  end
end
